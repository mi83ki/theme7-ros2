/***********************************************************************/
/*                                                                     */
/*  FILE        :CComRos2Arduino.hpp                                   */
/*  DATE        :Jul. 11, 2020                                         */
/*  DESCRIPTION :ROS2-Arduino1間通信用プログラムヘッダ                   */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/
#pragma once

#include <Arduino.h>
#include "queue.hpp"
#include "CLog.hpp"

/***********************************************************************/
/*                       ROS2-Arduino1間通信                           */
/***********************************************************************/

#define R2A_STX "r"           // スタート文字列（ROS→Arduino）
#define R2A_ETX '\n'          // エンド文字（ROS→Arduino）
#define A2R_STX "a"           // スタート文字列（Arduino→ROS）
#define A2R_ETX '\n'          // エンド文字（Arduino→ROS）

#define RX_BUF_SIZE 50        // 受信文字列のバッファサイズ

#define ROS_CYCLE_TIME 50     // ROSへの状態通知周期[ms]

class CComRos2Arduino
{
public:
  // コンストラクタ
  CComRos2Arduino();
  void begin(void);
  void updateArd2RosData(
    uint32_t delta_t,
    int32_t delta_enc_r,
    int32_t delta_enc_l,
    bool bumper
  );
  float getVelocityX(void);
  float getOmegaZ(void);

  void myputs(String msg);
  char mygetchar(void);
  bool readUntil(char endChar, char *str, uint8_t size);
  bool rxProcess(void);
  void txProcess(void);

private:
  // 受信データバッファ
  queue_t rxBuf[RX_BUF_SIZE];
  queueType rxQueue;
  
  // Arduino→ROSの構造体
  struct s_ard2ros {
    uint32_t delta_t;             // 経過時間 [ms]
    int32_t delta_enc_r;          // 右エンコーダ増分
    int32_t delta_enc_l;          // 左エンコーダ増分
    bool bumper;                  // バンパー値
  } m_ard2rosData;

  // ROS→Arduinoの構造体
  struct s_ros2ard {
    float velocity_x;             // x方向速度[m/s]
    float omega_z;                // z方向角速度[rad/s]
  } m_ros2ardData;

};

