/***********************************************************************/
/*                                                                     */
/*  FILE        :CComArduinos.hpp                                      */
/*  DATE        :Jul. 11, 2020                                         */
/*  DESCRIPTION :ROSロボ Arduino1-Arduino2間通信用プログラムヘッダ     */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

#ifndef _CCOM_ARDUINOS_HPP__
#define _CCOM_ARDUINOS_HPP__

#include <Arduino.h>
#include <Wire.h>
// 待ち行列関数
#include "queue.hpp"

/***********************************************************************/
/*                    Arduino1-Arduino2間通信                          */
/***********************************************************************/

#define STX 0x90            // スタートバイト
#define ETX 0xA0            // エンドバイト
//#define ACTIVE_CMD 0xD0     // アクティブコマンド
//#define READY_CMD 0xE0      // Ready通知コマンド

//#define SENDRQ_CMD 0xD1     // 送信要求コマンド
#define SLAVE 0             // スレーブ
#define MASTER 1            // マスター

#define SIZE_OF_CODE2 17    // 1パケットのバイト数

// Arduino2の状態量構造体
typedef struct arduino2_state {
  int32_t encR;
  int32_t encL;
  uint32_t time;  // 内部時間 [ms]
} arduino2StateType;

// 32bitデータを分割送信するための共用体
typedef union int32u {
  int32_t cnt32;
  struct{
    byte b31to25:7;
    byte b24to18:7;
    byte b17to11:7;
    byte b10to04:7;
    byte b03to00:4;
  } cnt7;
} int32uType;

// 符号なし32bitデータを分割送信するための共用体
typedef union uint32u {
  uint32_t cnt32;
  struct{
    byte b31to25:7;
    byte b24to18:7;
    byte b17to11:7;
    byte b10to04:7;
    byte b03to00:4;
  } cnt7;
} uint32uType;

class CComArduinos
{
public:
  // Arduino2の状態量
  arduino2StateType A2state;
  // スレーブ受信フラグ
  static uint8_t i2cRecievedFlag;
  // コンストラクタ
  CComArduinos(uint8_t select);
  // マスター側の送信動作（Arduino2）
  uint8_t i2cMasterTransmit(void);
  // スレーブ側の受信動作（Arduino1）
  uint8_t i2cSlaveRecieve(void);
  // I2Cで受信データが更新されたかどうか
  uint8_t isI2Crecieved(void);

private:
  // 送信データバッファ
  queue_t bufCode2[SIZE_OF_CODE2 + 1];
  queueType queueCode2;

  uint8_t encode32bit(int32_t data);
  uint8_t encodeU32bit(uint32_t data);
  uint8_t encode2(arduino2StateType a2st);
  uint8_t decode32bit(int32_t *data);
  uint8_t decodeU32bit(uint32_t *data);
  uint8_t decode2(arduino2StateType *a2st);
};

#endif  // _CCOM_ARDUINOS_HPP__
