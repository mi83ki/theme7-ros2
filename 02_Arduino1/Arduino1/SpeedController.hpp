/***********************************************************************/
/*                                                                     */
/*  FILE        :SpeedController.hpp                                   */
/*  DATE        :Jul 11, 2020                                          */
/*  DESCRIPTION :速度制御クラス                                        */
/*                                                                     */
/*  This file is generated by Hideaki Shimada                          */
/*                            Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

//#include <iostream.h>
#pragma once

#include "CComArduinos.hpp"
#include "pid.hpp"
#include "fix.hpp"

#define RESISTANCE        (3.75f)    // 抵抗値[ohm]
#define MAX_VOLT          (5.0f)     // 電圧値[V]
#define KR_TORQUE         (0.1523f)  // トルク定数[N・m/A]
#define KE_VOLT           (0.1523f)  // 逆起電力定数[V]
#define GEAR_RATIO        (150)      // ギア比
#define ENCODER_PULSE     (3)        // パルス数
#define TIRE_DIAMETER     (0.09f)    // タイヤの直径[m]
#define DUTY_RESOLUTION_  (100)
//PID用
#define PID_CYCLE_TIME    (50)   // PID制御の実行周期 [ms]
#define SC_KP             (0.25f)  // 比例ゲイン
//#define SC_TI             (1.5f)  // 積分時間
//#define SC_TD             (0.0f)  // 微分時間
#define SC_KI             (1.0f)  // 積分ゲイン
#define SC_KD             (0.0f)  // 微分ゲイン

class SpeedController
{
  public:
    SpeedController();
    ~SpeedController();

    /***********************************************************************/
    /*                           角速度制御関数                            */
    /***********************************************************************/
    void calcVelocity(int32_t enc, uint32_t time);
    int16_t controlMotorsSpeed(void);
    int16_t getDuty(void);
    float getPresentVelocity(void);
    float getTargetVelocity(void);
    void setTargetVelocity(fix targetOmega);

  private:
    int32_t last_enc;        //前回のエンコーダ値
    uint32_t last_time;      // [ms]
    fix duty_status;
    pidType pid_state;
    fix omega;                 // 車輪の回転角速度 [rad/s]
    fix velocity;              // 速度 [m/s]

    static const fix myPI;
    static const fix myTireDiameter;
    static const fix myGearRagtio;
    static const fix myEncoderPulse;
    static const fix myRotationCount;

    static const fix myResistance;
    static const fix myKrTorque;
    static const fix myKeVolt;
    static const fix myMaxVolt;
    static const fix myDutyResolution;
    static const fix myVoltage2Duty;
    static const int16_t myPIDfreq;
    static const fix myIntegMax;

};
