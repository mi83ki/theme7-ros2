/***********************************************************************/
/*                                                                     */
/*  FILE        :CFilter.h                                             */
/*  DATE        :Sun, May 30, 2010                                     */
/*  DESCRIPTION :Filtering Program Header                              */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki.                        */
/*                                                                     */
/***********************************************************************/
/*                               使い方                                */
/***********************************************************************/
/***********************************************************************/
/*                         一次フィルタの場合                          */
/***********************************************************************/
/*                                                                     */
/* ①フィルターしたい変数を firstfilterType x1; のように定義する。     */
/* ②その変数を initFirstFilter() で初期化する。                       */
/* ③FILT_FREQ の周波数で firstFiltering() する。                      */
/* ④x1.out がフィルタ後の値。                                         */
/*                                                                     */
/*---------------------------------------------------------------------*/
/*      例 (while内のif文がFILT_FREQで周期的に実行されるようにする)    */
/*---------------------------------------------------------------------*/
/*                                                                     */
/* int main(void) {                                                    */
/*   fix a;   // センサのA/D変化値等，時々刻々変化する値とする         */
/*                                                                     */
/*   // x1を高域遮断周波数2.0Hzのローパスフィルタに設定                */
/*   // フィルタリングを実行する周波数が100Hzの場合                    */
/*   CFirstFilter x1(LPF, 2.0, 100);                                   */
/*                                                                     */
/*   // x2を低域遮断周波数1.0Hzのハイパスフィルタに設定                */
/*   // フィルタリングを実行する周波数が100Hzの場合                    */
/*   CFirstFilter x2(HPF, 1.0, 100);                                   */
/*                                                                     */
/*   while (1) {                                                       */
/*     if (FILT_FREQごとに真) {                                        */
/*       a = getAD();        // センサの電圧をA/D変換してaに代入(例)   */
/*       x1.firstFiltering(a);    // aをローパスフィルタx1にかける     */
/*       x2.firstFiltering(a);    // aをハイパスフィルタx2にかける     */
/*       printf("%f, %f, %f\n\r",                                      */
/*              FIX_TO_FLOAT(a),                                       */
/*              FIX_TO_FLOAT(x1.getOUT()),                             */
/*              FIX_TO_FLOAT(x2.getOUT()));  // 出力                   */
/*     }                                                               */
/*   }                                                                 */
/*   return(0);                                                        */
/* }                                                                   */
/*                                                                     */
/***********************************************************************/


#ifndef _CFILTER_HPP__
#define _CFILTER_HPP__

#include "fix.hpp"

/***********************************************************************/
/*                      1次のフィルタリング関数                        */
/***********************************************************************/

// 列挙型
enum eFILT_MODE {LPF, HPF};

// 構造体
typedef struct firstfilter {      /* フィルタを使う変数の構造体 */
  fix out;              /* フィルタ後の出力値 */
  enum eFILT_MODE mode;       /* ローパスかハイパスか */
  fix tc;             /* 時定数 */
  fix lpf;              /* ローパスフィルタ値 */
} firstFilterType;

// クラス
class CFirstFilter
{
public:
  CFirstFilter(enum eFILT_MODE fimo, float freq, uint16_t sampleFrq);
  fix getLPF(void);
  fix getOUT(void);
  fix firstFiltering(fix in);

private:
  firstFilterType m_Filter;
  fix calcTC(float freq, uint16_t sampleFrq);
  float calcFREQ(fix tc, uint16_t sampleFrq);
};



/***********************************************************************/
/*                          移動平均フィルタ                           */
/***********************************************************************/

// 構造体
typedef struct movave {
  fix out;
  fix *data;            /* 過去のデータを記憶しておくバッファ */
  int64_t sum;          /* 合計 */
  uint8_t size;       /* 平均をとる個数 */
  uint8_t now;        /* リングバッファ用現在値 */
} movAverageType;

// クラス
class CMovAveFilter
{
public:
  CMovAveFilter(fix *da, uint8_t si, fix now);
  fix movingAverage(fix xn);
private:
  movAverageType m_Filter;
};





#endif  // _CFILTER_HPP__


