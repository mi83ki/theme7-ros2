/***********************************************************************/
/*                                                                     */
/*  FILE        :CEncoder.cpp                                          */
/*  DATE        :Jul 11, 2020                                          */
/*  DESCRIPTION :エンコーダカウントクラス                              */
/*                                                                     */
/*  This file is generated by Hideaki Shimada                          */
/*                            Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

#ifndef _CENCODER_CPP__
#define _CENCODER_CPP__

#include "CEncoder.hpp"

/***********************************************************************/
/*                             CountEncoder                            */
/*---------------------------------------------------------------------*/
/*                       エンコーダをカウントする                      */
/***********************************************************************/
// コンストラクタ
CEncoder::CEncoder() {
  pinMode(ENC0A, INPUT);  // エンコーダ0のAチャンネルを入力に設定
  pinMode(ENC0B, INPUT);  // エンコーダ0のBチャンネルを入力に設定
  pinMode(ENC1A, INPUT);  // エンコーダ1のAチャンネルを入力に設定
  pinMode(ENC1B, INPUT);  // エンコーダ1のBチャンネルを入力に設定
  EICRB = (1 << ISC61);          // INT6ピンの下降端で割込み
  EIMSK = (1 << INT6);           // INT6の外部割込み許可
  PCICR = (1 << PCIE0);          // ピン変化割込み許可
  PCMSK0 = (1 << PCINT1);        // PCINT1の割込み許可
  sei();                         // 全割込み許可
}

// エンコーダーRの割込み
void CEncoder::interruptEnc0A (void) {
  if (digitalRead(ENC0B) == 0) {
    encR++;
  } else {
    encR--;
  }
}
// エンコーダーLの割込み
void CEncoder::interruptEnc1B (void) {
  static uint8_t lastPin;
  uint8_t presentPin = digitalRead(ENC1B);

  if ((lastPin == HIGH)&&(presentPin == LOW)) {
    // 立下りエッジで実行
    if (digitalRead(ENC1A) == 0) {
      //encL++;
      encL--;
    } else {
      //encL--;
      encL++;
    }
  }
  lastPin = presentPin;
}

int32_t CEncoder::getEncR(void) {
  return(encR);
}

int32_t CEncoder::getEncL(void) {
  return(encL);
}

void CEncoder::setEncR(int32_t eR) {
  encR = eR;
}

void CEncoder::setEncL(int32_t eL) {
  encL = eL;
}

#endif  // _CENCODER_CPP__
