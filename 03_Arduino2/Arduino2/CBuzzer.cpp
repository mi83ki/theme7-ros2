/***********************************************************************/
/*                                                                     */
/*  FILE        :CBuzzer.cpp                                           */
/*  DATE        :Jul 05, 2020                                          */
/*  DESCRIPTION :ブザー駆動クラス                                      */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

#ifndef _CBUZZER_CPP__
#define _CBUZZER_CPP__

#include "CBuzzer.hpp"

/***********************************************************************/
/*                            ブザー関数                               */
/*                          delay()使用禁止！                          */
/***********************************************************************/
// MIDIのノート番号からOCR3Aの値に変換するテーブル
// IOクロック8MHz、64分周の8ビットタイマカウンタの場合
const uint16_t CBuzzer::midi_to_ocr3a[] = {
  64934, 60975, 57802, 54347, 51545, 
  48543, 45871, 43289, 40815, 38461, 
  36363, 34363, 32361, 30580, 28901, 
  27247, 25706, 24271, 22882, 21644, 
  20407, 19267, 18181, 17152, 16206, 
  15290, 14429, 13623, 12852, 12135, 
  11454, 10810, 10203, 9633, 9090, 
  8583, 8096, 7644, 7214, 6811, 
  6426, 6067, 5726, 5404, 5101, 
  4814, 4544, 4289, 4049, 3822, 
  3607, 3404, 3213, 3033, 2863, 
  2702, 2550, 2407, 2272, 2144, 
  2024, 1910, 1803, 1702, 1606, 
  1516, 1431, 1350, 1275, 1203, 
  1135, 1072, 1011, 955, 901, 
  850, 803, 757, 715, 675, 
  637, 601, 567, 535, 505, 
  477, 450, 425, 401, 378, 
  357, 337, 318, 300, 283, 
  267, 252, 238, 224, 212, 
  200, 189, 178, 168, 158, 
  149, 141, 133, 126, 118, 
  112, 105, 99, 94, 88, 
  83, 79
};

noteType CBuzzer::nullNote = {MY_NULL, 0};         // 空の音符

// 攻撃音案①
noteType shotMelody1[] = {
  {72, 100},   // ドを200ms
  {74, 100},   // レを200ms
  {76, 200},   // ミを500ms
  {MY_NULL, 0}
};  // 必ず最後に必要


//-------------------------------------------------------
// Function : コンストラクタ
// 説明     : タイマ3の設定
//-------------------------------------------------------
CBuzzer::CBuzzer() {
  // 最初のTCCR3AとTCCR3Bを記憶する
  defaultTCCR3A = TCCR3A;
  defaultTCCR3B = TCCR3B;

  pinMode(BUZZER_PIN, OUTPUT);          // ブザーのピンを出力に設定
  TCCR3A = (1 << COM3A0);               // 比較一致でOC0Aﾋﾟﾝ ﾄｸﾞﾙ(交互)出力
  TCCR3B = (1 << WGM32);                // 比較一致ﾀｲﾏ/ｶｳﾝﾀ解除(CTC)動作
  OCR3A = 1;                            // 初期値

  lastTCCR3A = TCCR3A;
  lastTCCR3B = TCCR3B;
  lastOCR3A = OCR3A;
  lastTCNT3 = TCNT3;
  usingBuzzer = 1;

  presentNote = &nullNote;
  melodyStep = 0;
}

// ブザーを一時的に無効化して、delayなどを使えるようにする
void CBuzzer::disableBuzzer(void) {
  lastTCCR3A = TCCR3A;
  lastTCCR3B = TCCR3B;
  lastOCR3A = OCR3A;
  lastTCNT3 = TCNT3;
  TCCR3A = defaultTCCR3A;
  TCCR3B = defaultTCCR3B;
  usingBuzzer = 0;
}

// 再度ブザーを有効化する
void CBuzzer::enableBuzzer(void) {
  TCCR3A = lastTCCR3A;
  TCCR3B = lastTCCR3B;
  OCR3A = lastOCR3A;
  TCNT3 = lastTCNT3;
  usingBuzzer = 1;
}

//-------------------------------------------------------
// Function : buzzerON
// 説明     : 指定したMIDIノート番号でブザーをスタートさせる
// 引数     : noteNum : MIDIのノート番号
//-------------------------------------------------------
void CBuzzer::buzzerON(uint8_t noteNum) {
  if(noteNum == PAUSE_NOTE) {  // 休符が来たとき
    TCCR3B = (1 << WGM32);
    TCNT3 = 0;
  } else if((noteNum >= MIDI_NOTE_MIN) && (noteNum <= MIDI_NOTE_MAX)) {
    OCR3A = midi_to_ocr3a[noteNum - MIDI_NOTE_MIN];
    TCNT3 = 0;
    TCCR3B |= (1 << CS31);  // 64分周でタイマースタート
  }
}

//-------------------------------------------------------
// Function : buzzerOFF
// 説明     : ブザーを終了させる
//-------------------------------------------------------
void CBuzzer::buzzerOFF(void) {
  //TCCR3B &= ~((1 << CS32)|(1 << CS31)|(1 << CS30));
  TCCR3B = (1 << WGM32);
  TCNT3 = 0;
}



//-------------------------------------------------------
// Function : startMelody
// 説明     : 音符配列を鳴動開始
// 引数     : 音符配列の先頭アドレス
//-------------------------------------------------------
void CBuzzer::startMelody(noteType *melody) {
  presentNote = melody;
}

//-------------------------------------------------------
// Function : stopMelody
// 説明     : 音符配列の鳴動を止める
//-------------------------------------------------------
void CBuzzer::stopMelody(void) {
  presentNote = &nullNote;
}

//-------------------------------------------------------
// Function : driveBuzzer
// 説明     : startMelodyで設定された音符配列を鳴動させる
//            メインルーチンで常時実行すること
// 引数     : なし
// 戻り値   : 0：待機中、1：鳴動中
//-------------------------------------------------------

uint8_t CBuzzer::driveBuzzer(void) {
  static uint32_t startedTime;
  switch(melodyStep) {
    case 0:
      if (presentNote->midiNumber != MY_NULL) { // ノート番号があれば
        buzzerON(presentNote->midiNumber);   // ブザーを鳴らす
        startedTime = CTimer::getGlobalTime();   // 現在時刻を記録
        melodyStep++;
      } else {
        buzzerOFF();
      }
      break;
    case 1:
      if ((CTimer::getGlobalTime() - startedTime) >= presentNote->timeLength) {  // length[ms]の時間が経過すれば
        buzzerOFF();
        presentNote++;
        if (presentNote->midiNumber != MY_NULL) { // ノート番号があれば
          buzzerON(presentNote->midiNumber);   // ブザーを鳴らす
          startedTime = CTimer::getGlobalTime();   // 現在時刻を記録
        } else {
          buzzerOFF();
          melodyStep = 0;
        }
      }
      break;
    default:
      melodyStep = 0;
      break;
  }
  return(melodyStep);
}

//-------------------------------------------------------
// Function : isMelodyFinished
// 説明     : 音符配列の鳴動処理が終了したかどうか知らせる
//-------------------------------------------------------
uint8_t CBuzzer::isMelodyFinished(void) {
  return((melodyStep == 0));
}

#endif  // _CBUZZER_CPP__
